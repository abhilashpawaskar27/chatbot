
 1. HTML Structure (Building the Interface)  
The HTML defines the chatbotâ€™s visual structure:  

 Key Elements
```html
<div class="chat-container">
    <div class="chat-header">Package Tracker Chatbot</div>
    <div class="chat-box" id="chatBox"></div>
    <div class="chat-input">
        <input type="text" id="userInput" placeholder="Enter tracking ID..." autocomplete="off">
        <button id="sendBtn">Send</button>
    </div>
</div>
```
 Breakdown
- `.chat-container` â†’ The main chat interface (holds all elements).  
- `.chat-header` â†’ Displays the chatbot's name.  
- `chatBox` â†’ This is where messages appear dynamically.  
- Input field (`userInput`) â†’ Allows users to enter tracking IDs.  
- Send button (`sendBtn`) â†’ Triggers message processing when clicked.  

---

 2. CSS (Styling the Chatbot)
The CSS enhances UI/UX by defining layout, colors, and spacing.

 Key Styling Techniques
```css
.chat-container {
    width: 400px;
    background: white;
    border-radius: 10px;
    box-shadow: 0px 4px 10px rgba(0,0,0,0.1);
    overflow: hidden;
}
.chat-box {
    padding: 15px;
    max-height: 400px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 10px;
}
.chat-input {
    display: flex;
    padding: 10px;
    background-color: c8e6c9;
}
```
 Breakdown
- `.chat-container` â†’ Defines chatbot size, rounded edges, and shadow effect.  
- `.chat-box` â†’ Ensures messages appear in a scrollable window.  
- `.chat-input` â†’ Arranges input field & button side by side.  

 Chat Bubbles for User & Bot
```css
.message { display: flex; align-items: center; gap: 10px; }
.message.bot { justify-content: flex-start; }
.message.user { justify-content: flex-end; }
.bubble { padding: 10px; border-radius: 10px; font-size: 14px; max-width: 70%; }
.bot .bubble { background-color: dcedc8; color: black; }
.user .bubble { background-color: 81c784; color: white; }
```
 Breakdown
- `.message.user` â†’ Aligns user messages to the right.  
- `.message.bot` â†’ Aligns bot responses to the left.  
- `.bubble` â†’ Rounded chat bubbles for a modern look.  
- Distinct colors for bot (`dcedc8`) and user (`81c784`) messages.  

---

 3. JavaScript (Logic & Interaction)
The JavaScript adds interactivity by handling messages, validating input, and responding dynamically.

 Appending Messages
```js
function appendMessage(message, sender) {
    const messageDiv = document.createElement("div");
    messageDiv.classList.add("message", sender);
    const bubbleDiv = document.createElement("div");
    bubbleDiv.classList.add("bubble");
    bubbleDiv.innerHTML = message;
    messageDiv.appendChild(bubbleDiv);
    chatBox.appendChild(messageDiv);
    chatBox.scrollTop = chatBox.scrollHeight;
}
```
 Breakdown
- Creates a new message bubble dynamically (`messageDiv`).  
- Assigns user or bot class for proper styling.  
- Appends message to the chat box (`chatBox`).  
- Ensures automatic scrolling when new messages arrive.  

---

 Tracking ID Validation & Response Handling
```js
function getPackageDetails(id) {
    if (id >= 100 && id <= 107) {
        return `Tracking ID: ${id}<br>Category: Mobile Phone ðŸ“±<br>Status: In Transit`;
    } else if (id >= 108 && id <= 122) {
        const electronicItems = ["Laptop", "Tablet", "Smartwatch", "Bluetooth Speaker", "Gaming Console",
        "Camera", "Wireless Earbuds", "Monitor", "Keyboard", "Smart TV", "Drone", "Projector",
        "VR Headset", "Power Bank", "Smart Home Device"];
        const itemIndex = (id - 108) % electronicItems.length;
        return `Tracking ID: ${id}<br>Category: ${electronicItems[itemIndex]} âš¡<br>Status: In Transit`;
    } else {
        return "Error: Please enter a valid tracking ID.";
    }
}
```
 Breakdown
- Checks if ID is between 100-107, assigns Mobile Phone status.  
- Checks if ID is between 108-122, maps item from `electronicItems` list.  
- Returns tracking category and status dynamically.  
- Ensures invalid IDs display an error message.  

---

 Handling User Input & Bot Response
```js
function processUserMessage() {
    const userMessage = userInput.value.trim();
    if (userMessage) {
        appendMessage(userMessage, "user");
        userInput.value = "";

        const trackingId = parseInt(userMessage);
        let botMessage = isNaN(trackingId) || userMessage.length !== 3 
            ? "Invalid input! Please enter a 3-digit tracking ID." 
            : getPackageDetails(trackingId);

        setTimeout(() => appendMessage(botMessage, "bot"), 600);
    }
}
```
 Breakdown
- Removes extra spaces from user input (`trim()`).  
- Displays user message in the chat (`appendMessage()`).  
- Checks if input is a valid 3-digit number.  
- Calls `getPackageDetails()` for tracking status retrieval.  
- Delays bot response by 600ms (`setTimeout()` for natural flow).  

---

 Event Listeners for User Input
```js
sendBtn.addEventListener("click", processUserMessage);
userInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") processUserMessage();
});
```
 Breakdown
- Triggers message processing when button (`sendBtn`) is clicked.  
- Allows Enter key to work as an alternative to clicking the button.  

---

 4. Final Touch: Welcome Message
```js
window.onload = () => appendMessage("Hi! Wondering where your package is? Send me your tracking ID, and Iâ€™ll pull up the latest updates for you!", "bot");
```
 Breakdown
- Automatically sends a greeting message when the page loads (`window.onload`).  
- Encourages user engagement immediately.  

---

 Summary
- HTML â†’ Defines chatbot structure.  
- CSS â†’ Enhances UI design for a clean and modern appearance.  
- JavaScript â†’ Handles message appending, validation, and tracking ID logic dynamically.  
- Optimizations â†’  
  - Auto-scrolling in chat.  
  - Input validation for better user experience.  
  - Dynamic response delay to simulate conversation flow.  

